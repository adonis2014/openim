// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `Filesystem3.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Filesystem3;

public final class DirectoryPrxHelper extends Ice.ObjectPrxHelperBase implements DirectoryPrx
{
    private static final String __createDirectory_name = "createDirectory";

    public DirectoryPrx createDirectory(String name)
        throws NameInUse
    {
        return createDirectory(name, null, false);
    }

    public DirectoryPrx createDirectory(String name, java.util.Map<String, String> __ctx)
        throws NameInUse
    {
        return createDirectory(name, __ctx, true);
    }

    private DirectoryPrx createDirectory(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NameInUse
    {
        __checkTwowayOnly(__createDirectory_name);
        return end_createDirectory(begin_createDirectory(name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_createDirectory(String name)
    {
        return begin_createDirectory(name, null, false, false, null);
    }

    public Ice.AsyncResult begin_createDirectory(String name, java.util.Map<String, String> __ctx)
    {
        return begin_createDirectory(name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_createDirectory(String name, Ice.Callback __cb)
    {
        return begin_createDirectory(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createDirectory(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createDirectory(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createDirectory(String name, Callback_Directory_createDirectory __cb)
    {
        return begin_createDirectory(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createDirectory(String name, java.util.Map<String, String> __ctx, Callback_Directory_createDirectory __cb)
    {
        return begin_createDirectory(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createDirectory(String name, 
                                                 IceInternal.Functional_GenericCallback1<DirectoryPrx> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createDirectory(name, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createDirectory(String name, 
                                                 IceInternal.Functional_GenericCallback1<DirectoryPrx> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createDirectory(name, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_createDirectory(String name, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<DirectoryPrx> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createDirectory(name, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createDirectory(String name, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<DirectoryPrx> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createDirectory(name, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_createDirectory(String name, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<DirectoryPrx> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createDirectory(name, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1UE<Filesystem3.DirectoryPrx>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 DirectoryPrxHelper.__createDirectory_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_createDirectory(String name, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createDirectory_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__createDirectory_name, __cb);
        try
        {
            __result.prepare(__createDirectory_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public DirectoryPrx end_createDirectory(Ice.AsyncResult __iresult)
        throws NameInUse
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __createDirectory_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(NameInUse __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            DirectoryPrx __ret;
            __ret = DirectoryPrxHelper.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __createDirectory_completed(Ice.TwowayCallbackArg1UE<DirectoryPrx> __cb, Ice.AsyncResult __result)
    {
        Filesystem3.DirectoryPrx __proxy = (Filesystem3.DirectoryPrx)__result.getProxy();
        DirectoryPrx __ret = null;
        try
        {
            __ret = __proxy.end_createDirectory(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __createFile_name = "createFile";

    public FilePrx createFile(String name)
        throws NameInUse
    {
        return createFile(name, null, false);
    }

    public FilePrx createFile(String name, java.util.Map<String, String> __ctx)
        throws NameInUse
    {
        return createFile(name, __ctx, true);
    }

    private FilePrx createFile(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NameInUse
    {
        __checkTwowayOnly(__createFile_name);
        return end_createFile(begin_createFile(name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_createFile(String name)
    {
        return begin_createFile(name, null, false, false, null);
    }

    public Ice.AsyncResult begin_createFile(String name, java.util.Map<String, String> __ctx)
    {
        return begin_createFile(name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_createFile(String name, Ice.Callback __cb)
    {
        return begin_createFile(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createFile(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createFile(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createFile(String name, Callback_Directory_createFile __cb)
    {
        return begin_createFile(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createFile(String name, java.util.Map<String, String> __ctx, Callback_Directory_createFile __cb)
    {
        return begin_createFile(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createFile(String name, 
                                            IceInternal.Functional_GenericCallback1<FilePrx> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createFile(name, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createFile(String name, 
                                            IceInternal.Functional_GenericCallback1<FilePrx> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createFile(name, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_createFile(String name, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<FilePrx> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createFile(name, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createFile(String name, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<FilePrx> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createFile(name, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_createFile(String name, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<FilePrx> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createFile(name, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1UE<Filesystem3.FilePrx>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            DirectoryPrxHelper.__createFile_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_createFile(String name, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createFile_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__createFile_name, __cb);
        try
        {
            __result.prepare(__createFile_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public FilePrx end_createFile(Ice.AsyncResult __iresult)
        throws NameInUse
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __createFile_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(NameInUse __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            FilePrx __ret;
            __ret = FilePrxHelper.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __createFile_completed(Ice.TwowayCallbackArg1UE<FilePrx> __cb, Ice.AsyncResult __result)
    {
        Filesystem3.DirectoryPrx __proxy = (Filesystem3.DirectoryPrx)__result.getProxy();
        FilePrx __ret = null;
        try
        {
            __ret = __proxy.end_createFile(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __find_name = "find";

    public NodeDesc find(String name)
        throws NoSuchName
    {
        return find(name, null, false);
    }

    public NodeDesc find(String name, java.util.Map<String, String> __ctx)
        throws NoSuchName
    {
        return find(name, __ctx, true);
    }

    private NodeDesc find(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NoSuchName
    {
        __checkTwowayOnly(__find_name);
        return end_find(begin_find(name, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_find(String name)
    {
        return begin_find(name, null, false, false, null);
    }

    public Ice.AsyncResult begin_find(String name, java.util.Map<String, String> __ctx)
    {
        return begin_find(name, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_find(String name, Ice.Callback __cb)
    {
        return begin_find(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_find(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_find(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_find(String name, Callback_Directory_find __cb)
    {
        return begin_find(name, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_find(String name, java.util.Map<String, String> __ctx, Callback_Directory_find __cb)
    {
        return begin_find(name, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_find(String name, 
                                      IceInternal.Functional_GenericCallback1<NodeDesc> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_find(name, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_find(String name, 
                                      IceInternal.Functional_GenericCallback1<NodeDesc> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_find(name, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_find(String name, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_GenericCallback1<NodeDesc> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_find(name, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_find(String name, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_GenericCallback1<NodeDesc> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_find(name, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_find(String name, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.Functional_GenericCallback1<NodeDesc> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_find(name, __ctx, __explicitCtx, __synchronous, 
                          new IceInternal.Functional_TwowayCallbackArg1UE<Filesystem3.NodeDesc>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                              {
                                  public final void __completed(Ice.AsyncResult __result)
                                  {
                                      DirectoryPrxHelper.__find_completed(this, __result);
                                  }
                              });
    }

    private Ice.AsyncResult begin_find(String name, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__find_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__find_name, __cb);
        try
        {
            __result.prepare(__find_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public NodeDesc end_find(Ice.AsyncResult __iresult)
        throws NoSuchName
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __find_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(NoSuchName __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            NodeDesc __ret = null;
            __ret = NodeDesc.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __find_completed(Ice.TwowayCallbackArg1UE<NodeDesc> __cb, Ice.AsyncResult __result)
    {
        Filesystem3.DirectoryPrx __proxy = (Filesystem3.DirectoryPrx)__result.getProxy();
        NodeDesc __ret = null;
        try
        {
            __ret = __proxy.end_find(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __list_name = "list";

    public NodeDesc[] list()
    {
        return list(null, false);
    }

    public NodeDesc[] list(java.util.Map<String, String> __ctx)
    {
        return list(__ctx, true);
    }

    private NodeDesc[] list(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__list_name);
        return end_list(begin_list(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_list()
    {
        return begin_list(null, false, false, null);
    }

    public Ice.AsyncResult begin_list(java.util.Map<String, String> __ctx)
    {
        return begin_list(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_list(Ice.Callback __cb)
    {
        return begin_list(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_list(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_list(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_list(Callback_Directory_list __cb)
    {
        return begin_list(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_list(java.util.Map<String, String> __ctx, Callback_Directory_list __cb)
    {
        return begin_list(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_list(IceInternal.Functional_GenericCallback1<NodeDesc[]> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_list(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_list(IceInternal.Functional_GenericCallback1<NodeDesc[]> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_list(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_list(java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_GenericCallback1<NodeDesc[]> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_list(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_list(java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_GenericCallback1<NodeDesc[]> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_list(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_list(java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.Functional_GenericCallback1<NodeDesc[]> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_list(__ctx, __explicitCtx, __synchronous, 
                          new IceInternal.Functional_TwowayCallbackArg1<Filesystem3.NodeDesc[]>(__responseCb, __exceptionCb, __sentCb)
                              {
                                  public final void __completed(Ice.AsyncResult __result)
                                  {
                                      DirectoryPrxHelper.__list_completed(this, __result);
                                  }
                              });
    }

    private Ice.AsyncResult begin_list(java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__list_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__list_name, __cb);
        try
        {
            __result.prepare(__list_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public NodeDesc[] end_list(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __list_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            NodeDesc[] __ret;
            __ret = NodeDescSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __list_completed(Ice.TwowayCallbackArg1<NodeDesc[]> __cb, Ice.AsyncResult __result)
    {
        Filesystem3.DirectoryPrx __proxy = (Filesystem3.DirectoryPrx)__result.getProxy();
        NodeDesc[] __ret = null;
        try
        {
            __ret = __proxy.end_list(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __destroy_name = "destroy";

    public void destroy()
        throws PermissionDenied
    {
        destroy(null, false);
    }

    public void destroy(java.util.Map<String, String> __ctx)
        throws PermissionDenied
    {
        destroy(__ctx, true);
    }

    private void destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws PermissionDenied
    {
        __checkTwowayOnly(__destroy_name);
        end_destroy(begin_destroy(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_destroy()
    {
        return begin_destroy(null, false, false, null);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx)
    {
        return begin_destroy(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_destroy(Ice.Callback __cb)
    {
        return begin_destroy(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_destroy(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(Callback_Node_destroy __cb)
    {
        return begin_destroy(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Callback_Node_destroy __cb)
    {
        return begin_destroy(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_destroy(IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_destroy(null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_destroy(IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_destroy(null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_destroy(__ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_destroy(__ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_destroy(__ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         DirectoryPrxHelper.__destroy_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__destroy_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__destroy_name, __cb);
        try
        {
            __result.prepare(__destroy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_destroy(Ice.AsyncResult __iresult)
        throws PermissionDenied
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __destroy_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(PermissionDenied __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __destroy_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Filesystem3.NodePrx __proxy = (Filesystem3.NodePrx)__result.getProxy();
        try
        {
            __proxy.end_destroy(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __name_name = "name";

    public String name()
    {
        return name(null, false);
    }

    public String name(java.util.Map<String, String> __ctx)
    {
        return name(__ctx, true);
    }

    private String name(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__name_name);
        return end_name(begin_name(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_name()
    {
        return begin_name(null, false, false, null);
    }

    public Ice.AsyncResult begin_name(java.util.Map<String, String> __ctx)
    {
        return begin_name(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_name(Ice.Callback __cb)
    {
        return begin_name(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_name(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_name(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_name(Callback_Node_name __cb)
    {
        return begin_name(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_name(java.util.Map<String, String> __ctx, Callback_Node_name __cb)
    {
        return begin_name(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_name(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_name(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_name(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_name(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_name(java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_name(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_name(java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_name(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_name(java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_name(__ctx, __explicitCtx, __synchronous, 
                          new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                              {
                                  public final void __completed(Ice.AsyncResult __result)
                                  {
                                      DirectoryPrxHelper.__name_completed(this, __result);
                                  }
                              });
    }

    private Ice.AsyncResult begin_name(java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__name_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__name_name, __cb);
        try
        {
            __result.prepare(__name_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_name(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __name_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __name_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        Filesystem3.NodePrx __proxy = (Filesystem3.NodePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_name(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    public static DirectoryPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), DirectoryPrx.class, DirectoryPrxHelper.class);
    }

    public static DirectoryPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), DirectoryPrx.class, DirectoryPrxHelper.class);
    }

    public static DirectoryPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), DirectoryPrx.class, DirectoryPrxHelper.class);
    }

    public static DirectoryPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), DirectoryPrx.class, DirectoryPrxHelper.class);
    }

    public static DirectoryPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, DirectoryPrx.class, DirectoryPrxHelper.class);
    }

    public static DirectoryPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, DirectoryPrx.class, DirectoryPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Filesystem3::Directory",
        "::Filesystem3::Node",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[0];
    }

    public static void __write(IceInternal.BasicStream __os, DirectoryPrx v)
    {
        __os.writeProxy(v);
    }

    public static DirectoryPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            DirectoryPrxHelper result = new DirectoryPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
