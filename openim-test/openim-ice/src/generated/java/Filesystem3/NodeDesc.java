// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `Filesystem3.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Filesystem3;

public class NodeDesc implements java.lang.Cloneable, java.io.Serializable
{
    public String name;

    public NodeType type;

    public NodePrx proxy;

    public NodeDesc()
    {
        name = "";
        type = NodeType.DirType;
    }

    public NodeDesc(String name, NodeType type, NodePrx proxy)
    {
        this.name = name;
        this.type = type;
        this.proxy = proxy;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        NodeDesc _r = null;
        if(rhs instanceof NodeDesc)
        {
            _r = (NodeDesc)rhs;
        }

        if(_r != null)
        {
            if(name != _r.name)
            {
                if(name == null || _r.name == null || !name.equals(_r.name))
                {
                    return false;
                }
            }
            if(type != _r.type)
            {
                if(type == null || _r.type == null || !type.equals(_r.type))
                {
                    return false;
                }
            }
            if(proxy != _r.proxy)
            {
                if(proxy == null || _r.proxy == null || !proxy.equals(_r.proxy))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::Filesystem3::NodeDesc");
        __h = IceInternal.HashUtil.hashAdd(__h, name);
        __h = IceInternal.HashUtil.hashAdd(__h, type);
        __h = IceInternal.HashUtil.hashAdd(__h, proxy);
        return __h;
    }

    public NodeDesc
    clone()
    {
        NodeDesc c = null;
        try
        {
            c = (NodeDesc)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(name);
        NodeType.__write(__os, type);
        NodePrxHelper.__write(__os, proxy);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        name = __is.readString();
        type = NodeType.__read(__is);
        proxy = NodePrxHelper.__read(__is);
    }

    static public void
    __write(IceInternal.BasicStream __os, NodeDesc __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public NodeDesc
    __read(IceInternal.BasicStream __is, NodeDesc __v)
    {
        if(__v == null)
        {
             __v = new NodeDesc();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final NodeDesc __nullMarshalValue = new NodeDesc();

    public static final long serialVersionUID = 285943198L;
}
